angular.module('starter.controllers', [])
.controller('DisplayMapCtrl', function($rootScope, $scope) {
    var markerArray = [];
    var directionsService = new google.maps.DirectionsService;
    var map = new google.maps.Map(document.getElementById('supermap'), {
        zoom: 13,
        center: {
            lat: Number($rootScope.mapData.origin.lat()),
            lng: Number($rootScope.mapData.origin.lng())
        }
    });
    var directionsDisplay = new google.maps.DirectionsRenderer({
        map: map
    });
    var stepDisplay = new google.maps.InfoWindow;
    directionsService.route({
        origin: $rootScope.mapData.origin,
        destination: $rootScope.mapData.destination,
        travelMode: google.maps.TravelMode.DRIVING
    }, function(response, status) {
        if (status === google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(response);
            var myRoute = response.routes[0].legs[0];
            for (var i = 0; i < myRoute.steps.length; i++) {
                var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
                marker.setMap(map);
                marker.setPosition(myRoute.steps[i].start_location);
                google.maps.event.addListener(marker, 'click', function() {
                    stepDisplay.setContent(text);
                    stepDisplay.open(map, marker);
                });
            }
        }
    });
})
.controller('ListCtrl', function($rootScope, $state, $scope) {
  $scope.map = function(data) {
    $rootScope.mapData = data;
    $state.go('app.map');
  };
})
.controller('MapCtrl', function($rootScope, $scope, $ionicLoading, $compile, $state, $http, $timeout, $ionicPopup) {
    $scope.submitLocations = function() {
        var start = $scope.location.start;
        var end = $scope.location.end;
        $rootScope.startLocation = start;
        $rootScope.endLocation = end;
        var googleKey = "AIzaSyDOeBvCcjFxfGnvcrS4a4RZ7dgqi3kbGKc";
        var source = "https://maps.googleapis.com/maps/api/geocode/json?address=" + start + "&key=" + googleKey;
        var origin, destination;
        $http.get(source).success(function(data) {
            if (data && data.results) {
                origin = data.results[0].geometry.location;
                var source = "https://maps.googleapis.com/maps/api/geocode/json?address=" + end + "&key=" + googleKey;
<<<<<<< HEAD
                $http.get(source).success(function(data2) {
                    if (data2 && data2.results) {
                        if (data2.results[0] === undefined) {
                            var myPopup1 = $ionicPopup.show({
                                title: 'Invalid locations',
                                subTitle: 'Please re-enter the correct locations',
                                scope: $scope,
                                buttons: [{
                                    text: 'Return!',
                                    type: 'button-positive'
                                }]
                            });
                            myPopup1.then(function(res) {
                                $state.go('app.start');
                            });
                        } else {
                            destination = data2.results[0].geometry.location;
                            $rootScope.listUber = $scope.getListUber(origin, destination);
                            $state.go('app.flist');
                        }
=======
                $http.get(source).success(function (data2) {
                  if(data2 && data2.results) {
                    if(data2.results[0] === undefined) {
                        var myPopup1 = $ionicPopup.show({
                          title: 'Invalid locations',
                          subTitle: 'Please re-enter the correct locations',
                          scope: $scope,
                          buttons: [
                            { text: 'Return!',
                            type: 'button-positive' }
                          ]
                        });
                        myPopup1.then(function(res) {
                          $state.go('app.start');
                        });
                    } else {
                      destination = data2.results[0].geometry.location;
                      $rootScope.listUber = $scope.getListUber(origin, destination);
                      $rootScope.listIndego = $scope.getListIndego(origin, destination);
                      $state.go('app.flist');
>>>>>>> b63dd83a322e32d7fdbe9afc9db7dd77968f8b15
                    }
                });
<<<<<<< HEAD
            }
        });
    };
    $scope.getListUber = function(origin, destination) {
        var url = 'https://api.uber.com/v1/estimates/price?server_token=yaxyXHwMLN6-xh8EOuP3LMmQbDSYR2UP3aQCGeNB&start_latitude=' + origin.lat;
        url += '&start_longitude=' + origin.lng;
        url += '&end_latitude=' + destination.lat;
        url += '&end_longitude=' + destination.lng;
=======
              }
          });
      };
      $rootScope.getDetail = function(data) {
        if(data.name.toLowerCase().indexOf('uberxl') > -1) $state.go('app.uberxl');
        else if(data.name.toLowerCase().indexOf('uberx') > -1) $state.go('app.uberx');
        else if(data.name.toLowerCase().indexOf('uberblack') > -1) $state.go('app.uberblack');
        else if(data.name.toLowerCase().indexOf('ubersuv') > -1) $state.go('app.ubersuv');
        else if(data.name.toLowerCase().indexOf('uberfamily') > -1) $state.go('app.uberfamily');
      };
      $rootScope.isUber = function (data) {
        return data.name.toLowerCase().indexOf('uber') > -1;
      };
      $scope.getListUber = function (origin, destination) {
          //var origin = {lat: 51.5033630, long: -0.1276250};
          //var destination = {lat: 51.5033830, long: -0.1276250};

          var url = 'https://api.uber.com/v1/estimates/price?server_token=yaxyXHwMLN6-xh8EOuP3LMmQbDSYR2UP3aQCGeNB&start_latitude=' + origin.lat;
          url += '&start_longitude=' + origin.lng;
          url += '&end_latitude=' + destination.lat;
          url += '&end_longitude=' + destination.lng;

          var req = {
             'method': 'GET',
             'url': url,
             'dataType' : 'json'
          }

          $http(req).then(function(uberPrice) {
              $rootScope.uberPrice = uberPrice.data.prices;
              url = 'https://api.uber.com/v1/estimates/time?server_token=yaxyXHwMLN6-xh8EOuP3LMmQbDSYR2UP3aQCGeNB&start_latitude=' + origin.lat;
              url += '&start_longitude=' + origin.lng;
              req = {
                 'method': 'GET',
                 'url': url,
                 'dataType' : 'json'
              };

                  var originUber = new google.maps.LatLng(origin.lat, origin.lng);
                  var destinationUber = new google.maps.LatLng(destination.lat, destination.lng);

                  var service = new google.maps.DistanceMatrixService();
                  var data = [];
                  service.getDistanceMatrix({
                      origins: [originUber],
                      destinations: [destinationUber],
                      travelMode: google.maps.TravelMode.DRIVING
                    }, function(response, status) {
                      var rows = response.rows;
                      var row = rows[0];
                      var duration = row["elements"][0].duration;
                      var second = duration.value;
                      for(var price in $rootScope.uberPrice) {
                        var result = "";
                        result += Number(($rootScope.uberPrice[price].duration + second)/60).toFixed(2) + " mins";

                        data.push({
                          image: "Uber.jpg",
                          name: $rootScope.uberPrice[price].display_name,
                          price: $rootScope.uberPrice[price].estimate,
                          distance: $rootScope.uberPrice[price].distance + " miles",
                          duration: result
                        });
                      }

                      //populate data for Septa by google API
                      var originMap = new google.maps.LatLng(origin.lat, origin.lng);
                      var destinationMap = new google.maps.LatLng(destination.lat, destination.lng);
                      var service = new google.maps.DistanceMatrixService();
                      service.getDistanceMatrix({
                          origins: [originMap],
                          destinations: [destinationMap],
                          travelMode: google.maps.TravelMode.TRANSIT
                          ,transitOptions: {modes: [google.maps.TransitMode.BUS]}
                        }, function(response, status) {
                          if(response.rows[0].elements.length > 0) {
                            for(var i in response.rows[0].elements) {
                              if(response.rows[0].elements[i].status !== 'ZERO_RESULTS') {
                                  data.push({
                                name: "Septa Bus " + Math.floor((Math.random() * 125) + 1),
                                image: "septaBus.jpg",
                                distance: response.rows[0].elements[i].distance.text,
                                duration: response.rows[0].elements[i].duration.text,
                                price: response.rows[0].elements[i].fare ? response.rows[0].elements[i].fare.text : "$2.25"
                              });
                              }
                            }
                            //populate data for Septa by google API
                            originMap = new google.maps.LatLng(origin.lat, origin.lng);
                            destinationMap = new google.maps.LatLng(destination.lat, destination.lng);
                            service = new google.maps.DistanceMatrixService();
                            service.getDistanceMatrix({
                                origins: [originMap],
                                destinations: [destinationMap],
                                travelMode: google.maps.TravelMode.TRANSIT
                                ,transitOptions: {modes: [google.maps.TransitMode.SUBWAY]}
                              }, function(response, status) {
                                if(response.rows[0].elements.length > 0) {
                                  for(var i in response.rows[0].elements) {
                                    data.push({
                                      name: "Septa Subway",
                                      image: "subway.jpg",
                                      distance: response.rows[0].elements[i].distance.text,
                                      duration: response.rows[0].elements[i].duration.text,
                                      price: response.rows[0].elements[i].fare ? response.rows[0].elements[i].fare.text : "$2.25"
                                    });
                                  }
                                  //populate data for Septa by google API
                                  originMap = new google.maps.LatLng(origin.lat, origin.lng);
                                  destinationMap = new google.maps.LatLng(destination.lat, destination.lng);
                                  service = new google.maps.DistanceMatrixService();
                                  service.getDistanceMatrix({
                                      origins: [originMap],
                                      destinations: [destinationMap],
                                      travelMode: google.maps.TravelMode.TRANSIT
                                      ,transitOptions: {modes: [google.maps.TransitMode.SUBWAY]}
                                    }, function(response, status) {
                                      if(response.rows[0].elements.length > 0) {
                                        for(var i in response.rows[0].elements) {
                                          data.push({
                                            name: "Septa Trolley",
                                            image: "trolley.jpg",
                                            distance: response.rows[0].elements[i].distance.text,
                                            duration: response.rows[0].elements[i].duration.text,
                                            price: response.rows[0].elements[i].fare ? response.rows[0].elements[i].fare.text : "$2.25"
                                          });
                                        }
                                        $rootScope.datas = data;
                                        $rootScope.$apply();
                                      }
                                    });
                                  $rootScope.datas = data;
                                  $rootScope.$apply();
                                }
                              });
                            $rootScope.datas = data;
                            $rootScope.$apply();
                          }
                        });
                      $rootScope.datas = data;
                      $rootScope.$apply();
                  });
                } , function(err) {
                  // An elaborate, custom popup
                  var myPopup = $ionicPopup.show({
                    title: 'Invalid locations',
                    subTitle: 'Please re-enter the correct locations',
                    scope: $scope,
                    buttons: [
                      { text: 'Go back!',
                      type: 'button-positive' }
                    ]
                  });
                  myPopup.then(function(res) {
                    $state.go('app.start');
                  });
              });
      };

      getSmallestValueLongitude = function (array, value){
        var difference = 9999999;
        var closest = 0;
        for (var i in array) {
          if((Math.abs(array[i].geometry.coordinates[0] - value)) < difference){
            difference = Math.abs(array[i].geometry.coordinates[0] - value);
            //console.log("difference longitude" + difference);
            closest = array[i].geometry.coordinates[0];
          }
        }
        return closest;
      }

      getSmallestValueLatidude = function (array, value){
        var difference = 9999999;
        var closest = 0;
        for (var i in array) {
          if((Math.abs(array[i].geometry.coordinates[1] - value)) < difference){
            difference = Math.abs(array[i].geometry.coordinates[1] - value);
            //console.log("difference latitude" + difference);
            closest = array[i].geometry.coordinates[1];
          }
        }
        return closest;
      }

      $scope.getListIndego = function (longitude, latitude) {
            //console.log(origin + " origin" + destination + " destination")
            var url = 'https://www.rideindego.com/stations/json/';
            var req = {
               'method': 'GET',
               'url': url,
               'dataType' : 'json'
            }

            $http(req).then(function(indegoPrice) {
              var indegoArray = indegoPrice.data.features;
              var closestLongitute = getSmallestValueLongitude(indegoArray, longitude);
              var closestLatitude = getSmallestValueLatidude(indegoArray, latitude);
              // var difference = 9999999;
              // var closest = 0;
              // for (var i in indegoArray) {
              //   if((Math.abs(indegoArray[i].geometry.coordinates[0] - origin)) < difference){
              //     console.log("it is less");
              //     difference = Math.abs(indegoArray[i].geometry.coordinates[0] - origin);
              //     console.log("difference" + difference);
              //     closest = indegoArray[i].geometry.coordinates[0];
              //   }
              //   console.log(indegoArray[i].geometry.coordinates[0]);
              // }
              console.log("closest longitute is " + closestLongitute);
              console.log("closest latitude is " + closestLatitude)
            }, function(err) {
              console.log("error indegoPrice")
            });
      };

      //$scope.getListIndego("-75.18885809999999", "39.953643");

      $scope.getSeptaNearestLocation = function (latitude, longitude) {       
            console.log(latitude + " latitude" + longitude + " longitude")                 
              var url = 'https://www3.septa.org/hackathon/locations/get_locations.php?lon='    
              + longitude + '&lat=' + latitude + '&radius=3';                     
            var req = {                                                           
              'method': 'GET',                                                    
              'url': url,                                                         
              'dataType' : 'json'                                                 
            };                                                                    
                                                                                  
            console.log(url);                                                     
                                                                                  
            $http(req).then(function(getLocationsData) {                          
              debugger;                                                           
              console.log(getLocationsData[0].location_id);                       
            }, function(err) {                                                           
              console.log("error in getting Septa nearest location")                     
            });
    };                                                                          
                                                                                         
    $scope.getSeptaNearestLocation("39.9539782", "-75.1888444");


      // var totalRails = [];
      // function getPublicTransport(transitMode, getNextPublic, onFinalTransit) {
      //     var origin = {lat: 51.5033630, long: -0.1276250};
      //     var destination = {lat: 51.5033830, long: -0.1276250};

      //     var originMap = new google.maps.LatLng(origin.lat, origin.lng);
      //     var destinationMap = new google.maps.LatLng(destination.lat, destination.lng);

      //     var service = new google.maps.DistanceMatrixService();
      //     service.getDistanceMatrix({
      //         origins: [originMap],
      //         destinations: [destinationMap],
      //         travelMode: google.maps.TravelMode.TRANSIT
      //         ,transitOptions: {modes: [transitMode]}
      //       }, callback);
>>>>>>> b63dd83a322e32d7fdbe9afc9db7dd77968f8b15

        var req = {
            'method': 'GET',
            'url': url,
            'dataType': 'json'
        }

        $http(req).then(function(uberPrice) {
            $rootScope.uberPrice = uberPrice.data.prices;
            url = 'https://api.uber.com/v1/estimates/time?server_token=yaxyXHwMLN6-xh8EOuP3LMmQbDSYR2UP3aQCGeNB&start_latitude=' + origin.lat;
            url += '&start_longitude=' + origin.lng;
            req = {
                'method': 'GET',
                'url': url,
                'dataType': 'json'
            };

            var originUber = new google.maps.LatLng(origin.lat, origin.lng);
            var destinationUber = new google.maps.LatLng(destination.lat, destination.lng);
            $rootScope.datas = [];
            for (var price in $rootScope.uberPrice) {
                var result = "";
                result += Number(($rootScope.uberPrice[price].duration) / 60).toFixed(0) + " mins";
                $rootScope.datas.push({
                    image: "Uber.jpg",
                    name: $rootScope.uberPrice[price].display_name,
                    price: $rootScope.uberPrice[price].estimate,
                    distance: $rootScope.uberPrice[price].distance + " miles",
                    duration: result,
                    origin: originUber,
                    destination: destinationUber,
                    mode: 'drive'
                });
            }
            var directionsService = new google.maps.DirectionsService;
            directionsService.route({
                    origin: originUber,
                    destination: destinationUber,
                    travelMode: google.maps.TravelMode.TRANSIT,
                    transitOptions: {
                      modes: [google.maps.TransitMode.BUS]
                    }
                }, function(response, status) {
                if(response.routes.length > 0) {
                  for(var i in response.routes) {
                    $rootScope.datas.push({
                      name: "Bus",
                      image: "bus.gif",
                      distance: response.routes[i].legs[0].distance.text,
                      duration: response.routes[i].legs[0].duration.text,
                      price:response.routes[i].fare.text,
                      origin: originUber,
                      destination: destinationUber,
                      mode: 'bus'
                    });
                  }
                }
                $rootScope.$apply();
            });
            directionsService.route({
                    origin: originUber,
                    destination: destinationUber,
                    travelMode: google.maps.TravelMode.TRANSIT,
                    transitOptions: {
                      modes: [google.maps.TransitMode.SUBWAY]
                    }
                }, function(response, status) {
                if(response.routes.length > 0) {
                  for(var i in response.routes) {
                    $rootScope.datas.push({
                      name: "Subway",
                      image: "train.png",
                      distance: response.routes[i].legs[0].distance.text,
                      duration: response.routes[i].legs[0].duration.text,
                      price:response.routes[i].fare.text,
                      origin: originUber,
                      destination: destinationUber,
                      mode: 'train'
                    });
                  }
                }
                $rootScope.$apply();
            });
            directionsService.route({
                    origin: originUber,
                    destination: destinationUber,
                    travelMode: google.maps.TravelMode.DRIVING
                }, function(response, status) {
                if(response.routes.length > 0) {
                  for(var i in response.routes) {
                    $rootScope.datas.push({
                      name: "Self Driving",
                      image: "car.png",
                      distance: response.routes[i].legs[0].distance.text,
                      duration: response.routes[i].legs[0].duration.text,
                      origin: originUber,
                      destination: destinationUber,
                      mode: 'drive'
                    });
                  }
                }
                $rootScope.$apply();
            });
            directionsService.route({
                    origin: originUber,
                    destination: destinationUber,
                    travelMode: google.maps.TravelMode.WALKING
                }, function(response, status) {
                if(response.routes.length > 0) {
                  for(var i in response.routes) {
                    $rootScope.datas.push({
                      name: "Walking",
                      image: "walk.png",
                      distance: response.routes[i].legs[0].distance.text,
                      duration: response.routes[i].legs[0].duration.text,
                      origin: originUber,
                      destination: destinationUber,
                      mode: 'walk'
                    });
                  }
                }
                $rootScope.$apply();
            });
            directionsService.route({
                    origin: originUber,
                    destination: destinationUber,
                    travelMode: google.maps.TravelMode.BICYCLING
                }, function(response, status) {
                if(response.routes.length > 0) {
                  for(var i in response.routes) {
                    $rootScope.datas.push({
                      name: "Bicycling",
                      image: "bike.png",
                      distance: response.routes[i].legs[0].distance.text,
                      duration: response.routes[i].legs[0].duration.text,
                      origin: originUber,
                      destination: destinationUber,
                      mode: 'bike'
                    });
                  }
                }
                $rootScope.$apply();
            });
        }, function(err) {
            // An elaborate, custom popup
            var myPopup = $ionicPopup.show({
                title: 'Invalid locations',
                subTitle: 'Please re-enter the correct locations',
                scope: $scope,
                buttons: [{
                    text: 'Go back!',
                    type: 'button-positive'
                }]
            });
            myPopup.then(function(res) {
                $state.go('app.start');
            });
        });
    };

    $scope.location = {};
    // function initialize() {
    //   var mapOptions = {
    //     zoom: 16,
    //     mapTypeId: google.maps.MapTypeId.ROADMAP
    //   };
    //   var map = new google.maps.Map(document.getElementById("map"),
    //       mapOptions);
    //   $scope.map = map;
    //   $scope.loading = $ionicLoading.show({
    //     content: 'Getting current location...',
    //     showBackdrop: false
    //   });
    //   $ionicLoading.hide();
    //   debugger;
    //   navigator.geolocation.getCurrentPosition(function(pos) {
    //     $scope.map.setCenter(new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude));
    //     var marker = new google.maps.Marker({
    //       position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),
    //       map: map,
    //       title: 'Uluru (Ayers Rock)'
    //     });

    //     var geocoder = new google.maps.Geocoder();
    //     var latlng = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
    //     var contentString;
    //     geocoder.geocode({ 'latLng': latlng }, function (results, status) {
    //       if (status == google.maps.GeocoderStatus.OK) {
    //         contentString = "<div>" + results[0].formatted_address + "</div>";
    //         $scope.location.start = results[0].formatted_address;
    //         $scope.$apply();
    //       } else {
    //         contentString = "<div>Your current location!</div>";
    //       }
    //       //Marker + infowindow + angularjs compiled ng-click
    //       var compiled = $compile(contentString)($scope);

    //       var infowindow = new google.maps.InfoWindow({
    //           content: compiled[0]
    //         });
    //         infowindow.open(map,marker);
    //       }, function(error) {
    //         alert('Unable to get location: ' + error.message);
    //     });
    //   });
    // }
    map = new google.maps.Map(document.getElementById('map'), {
        center: {
            lat: -34.397,
            lng: 150.644
        },
        zoom: 8
    });
    //google.maps.event.addDomListener(window, 'load', initialize);
});
